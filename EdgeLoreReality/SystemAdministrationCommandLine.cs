using UnityEngine;
using System.Collections.Generic;

namespace edgelorereality
{
    public class SystemAdministrationCommandLine : MonoBehaviour
    {
        // Represents a word or command created in the system
        private class CommandEntry
        {
            public string CommandID { get; private set; }
            public string Content { get; private set; }
            public string Category { get; private set; }

            public CommandEntry(string content, string category)
            {
                CommandID = System.Guid.NewGuid().ToString();
                Content = content;
                Category = category;
            }

            public void Display()
            {
                Debug.Log($"Command ID: {CommandID}, Content: {Content}, Category: {Category}");
            }
        }

        // Represents the master dictionary of words and commands
        private List<CommandEntry> commandDictionary = new List<CommandEntry>();

        // Energy pool shared with the network
        private float sharedEnergy = 10000f; // Initial shared energy (units)

        // Add a new word or command
        public void AddCommand(string content, string category)
        {
            if (sharedEnergy < 10f)
            {
                Debug.LogWarning("Not enough shared energy to create a new command.");
                return;
            }

            CommandEntry command = new CommandEntry(content, category);
            commandDictionary.Add(command);

            sharedEnergy -= 10f; // Deduct energy for creating a command
            Debug.Log($"New Command Added - ID: {command.CommandID}, Content: {content}, Category: {category}. Remaining Energy: {sharedEnergy}");
        }

        // Display all commands in the dictionary
        public void DisplayCommands()
        {
            Debug.Log("Displaying all commands in the dictionary...");
            foreach (var command in commandDictionary)
            {
                command.Display();
            }
        }

        // Replenish shared energy
        public void ReplenishEnergy(float amount)
        {
            sharedEnergy += amount;
            Debug.Log($"Shared Energy Replenished by {amount} units. Total Energy: {sharedEnergy}");
        }

        // Execute a command by ID
        public void ExecuteCommand(string commandID)
        {
            CommandEntry command = commandDictionary.Find(c => c.CommandID == commandID);
            if (command != null)
            {
                Debug.Log($"Executing Command - ID: {command.CommandID}, Content: {command.Content}");
                sharedEnergy -= 5f; // Deduct energy for execution
            }
            else
            {
                Debug.LogWarning($"Command with ID '{commandID}' not found.");
            }
        }

        // Reset shared energy
        public void ResetEnergy()
        {
            sharedEnergy = 10000f;
            Debug.Log("Shared Energy Reset to 10000 units.");
        }

        private void Start()
        {
            Debug.Log("System Administration Command Line Initialized.");

            // Automate actions
            InvokeRepeating(nameof(AutoAddCommand), 2f, 5f); // Add a command every 5 seconds
            InvokeRepeating(nameof(AutoExecuteCommand), 3f, 7f); // Execute a command every 7 seconds
            InvokeRepeating(nameof(AutoReplenishEnergy), 4f, 10f); // Replenish energy every 10 seconds
            InvokeRepeating(nameof(DisplayCommands), 6f, 12f); // Display commands every 12 seconds
        }

        // Automatically add a new command
        private void AutoAddCommand()
        {
            string[] categories = { "Simulation", "Network", "Energy", "Debug" };
            string category = categories[Random.Range(0, categories.Length)];
            AddCommand($"AutoGeneratedCommand-{Random.Range(1, 1000)}", category);
        }

        // Automatically execute the first available command
        private void AutoExecuteCommand()
        {
            if (commandDictionary.Count > 0)
            {
                ExecuteCommand(commandDictionary[0].CommandID);
                commandDictionary.RemoveAt(0); // Remove executed command from the list
            }
            else
            {
                Debug.LogWarning("No commands available to execute.");
            }
        }

        // Automatically replenish shared energy
        private void AutoReplenishEnergy()
        {
            float replenishAmount = Random.Range(200f, 500f);
            ReplenishEnergy(replenishAmount);
        }
    }
}
